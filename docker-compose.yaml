services:
  publisher:
    build:
      context: .
      dockerfile: Dockerfile.publisher
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080" 
    env_file: ".env"
    volumes:
      - ./config:/app/config

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file: ".env"
    volumes:
      - ./config:/app/config

  rabbitmq:
    image: rabbitmq:management-alpine
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 3s
      timeout: 10s
      retries: 5
    hostname: rabbitmq
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    env_file: ".env"

  postgres:
    image: postgres:alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/repository/data
    env_file: ".env"

  migrate:
    image: migrate/migrate
    command: -path=./migrations/ -database "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable" up
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations:ro
    env_file: ".env"

volumes:
  rabbitmq-data:
  postgres-data: